#!/usr/bin/php
<?php
// Record start time
inform("Starting $argv[0] at " . timestamp());

require("Archive.class.php");
// error_reporting(E_ERROR);
define("DEBUG", false);
$config_dir = "/etc/backup";
//$config_dir = ".";
$config_file = $config_dir . "/backup.conf";
$class_archive = new Archive();

debug("Including $config_file");
if (is_readable($config_file)) {
	include_once $config_file;
} else {
	die ("Can't read configuration file\n");
}

init();
main();
housekeeping();

inform("Ending $argv[0] at " . timestamp());

function init()
{
	global $backup_conf;

	global $class_archive;
	$class_archive->set_debug(DEBUG);
	$class_archive->add_resource($backup_conf['tmp_dir']);


	foreach ([$backup_conf['dst_dir'], $backup_conf['tmp_dir']] as $dir) {
		// Verify directory exists
		if (is_dir($dir)) {
    		// Verify directory is writable
			if (opendir($dir)) {
				// write dummy file to verify we've got write access
				$filename = "$dir/" . timestamp();
				if (!fopen($filename, "w")) {
					die('Can\'t write to directory ' . $dir);
				} else {
					// All ok, remove file again
					unlink($filename);
				}
			} else {
				die('Can\'t open directory ' . $dir);
			}
		} elseif (mkdir($dir, 0777, true)) {
			debug("Created directory $dir");
		}
	}
}

function main()
{
	global $backup_mysql, $backup_conf;
	package_info();

	if (isset($backup_conf['retain'])) {
		remove_old();
	}

	if (count($backup_mysql['databases']) > 0) {
		mysql_db_size();
		backup_mysql();
	}

	backup_data();

	if ($backup_conf['store_remote']) {
		store_remote();
	}
}

function package_info()
{
	$packages_cmd     = "dpkg --get-selections | cut -f1 ";
	$single_line_cmd  = sprintf("%s | tr '\\012' ' '", $packages_cmd);
	$md5_cmd          = sprintf("%s | md5sum | cut -f1 -d ' '", $single_line_cmd);
	$num_packages_cmd = sprintf("%s | wc -l", $packages_cmd);
	debug(sprintf("\$packages_cmd: %s", $packages_cmd));
	debug(sprintf("\$single_line_cmd: %s", $single_line_cmd));
	debug(sprintf("\$md5_cmd: %s", $md5_cmd));
	debug(sprintf("\$num_packages_cmd: %s", $num_packages_cmd));

	exec($num_packages_cmd, $output, $retval);
	inform(sprintf("Number of packages installed: %d", $output[0]));
	unset($output);

	inform("md5sum of list of installed packages: ", false);
	exec($md5_cmd, $output, $retval);
	inform("$output[0]");
	unset($output);

	inform("List of installed packages:");
	exec($single_line_cmd, $output, $retval);
	inform("$output[0]");
	unset($output);
}

function housekeeping()
{
	global $backup_conf;

	if (!$backup_conf['tmp_dir'] == "/tmp") {
		delete_recursive($backup_conf['tmp_dir'] . "/");
	}
}

function encrypt()
{
	global $archive, $backup_conf;

	$cmd = sprintf("gpg --encrypt -r %s --output %s.gpg %s && rm %s", $backup_conf['pgp_recipient'], $archive, $archive, $archive);
	debug(sprintf("\$cmd: %s", $cmd));
	exec($cmd, $output, $retval);
	if ($retval == 0) {
		inform(sprintf("Archive encrypted for: %s", $backup_conf['pgp_recipient']));
		$archive = sprintf("%s.gpg", $archive);
	} else {
		inform("Error $retval:");
		foreach ($output as $line) {
			inform("$line");
		}
	}
}

function mysql_db_size()
{
	global $backup_mysql, $backup_conf;

	$lbl_db = "Database Name";
	$lbl_size_bytes = "Size in Bytes";
	$lbl_size_mib = "Size in MiB";
	$query = sprintf("SELECT
  table_schema '%s',
  SUM(data_length + index_length) '%s',
  ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) '%s'
FROM information_schema.tables
GROUP BY table_schema;", $lbl_db, $lbl_size_bytes, $lbl_size_mib);

	$conn = new mysqli($backup_mysql['hostname'], $backup_mysql['username'], $backup_mysql['password']);
	if ($conn->connect_error) {
		die("MySQLi connection failed: " . $conn->connect_error);
	} else {
		$result = $conn->query($query);
		inform(sprintf("\n%1$- 30s | %2$ 15s | %3$ 15s", $lbl_db, $lbl_size_bytes, $lbl_size_mib));
		inform(sprintf("%1$'-30s-+-%1$'-15s-+-%1$'-15s", "-"));
		while($row = $result->fetch_assoc()) {
			inform(sprintf("%1$- 30s | %2$ 15d | %3$ 15.2f", $row[$lbl_db], $row[$lbl_size_bytes], $row[$lbl_size_mib]));
		}
		$conn->close();
		inform("");
	}
}

function backup_mysql()
{
	global $backup_mysql, $backup_conf;

	foreach ($backup_mysql['databases'] as $db) {
		if (isset($db)) {
			inform("Starting backup of mysql database '$db'");
			$filename = sprintf("%s/%s-%s.sql",
				$backup_conf['tmp_dir'],
				"$db",
				timestamp("Ymd")
			);
			$cmd = sprintf("mysqldump --host=\"%s\" --user=\"%s\" --password='%s' %s --databases '%s' > %s",
				$backup_mysql['hostname'],
				$backup_mysql['username'],
				$backup_mysql['password'],
				$backup_mysql['options'],
				$db,
				$filename
			);
			debug(sprintf("\$mc = %s", $cmd));

			exec("$cmd 2>1", $output, $retval);

			if ($retval == 0) {
				$chown_cmd = "chown {$backup_conf['luser']}:{$backup_conf['lgroup']} $filename";
				exec($chown_cmd, $output, $retval);
				inform("Finished backup of mysql database '$db'");
			} else {
				inform("Error $retval:");
				foreach ($output as $line) {
					inform("$line");
				}
				unlink($filename);
				// exit($retval);
			}
		}
	}
}

function copy_recursive($source_dir = "", $dest_dir = "")
{
	$error = 0;
	$file_list = [];

	if ($source_dir == "") {
		inform("ERROR: copy_recursive: \$source_dir is empty");
		$error = 1;
	} elseif ($dest_dir == "") {
		inform("ERROR: copy_recursive: \$dest_dir is empty");
		$error = 2;
	} elseif (!is_readable($source_dir)) {
		inform("ERROR: copy_recursive: \$source_dir is not readable");
		$error = 3;
	} elseif (!is_writable($dest_dir)) {
		inform("ERROR: copy_recursive: \$dest_dir is not writable");
		$error = 4;
	}

	if ($error === 0) {
		$contents = scandir($source_dir);
		for ($i = 2; $i < count($contents); $i++) {
			$newresource = sprintf("%s/%s", $source_dir, $contents[$i]);
			if (is_dir(sprintf("%s/%s", $source_dir, $contents[$i]))) {
				if (! (file_exists($newresource) && is_dir($newresource))) {
					mkdir($newresource);
				}
				$copied_files = copy_recursive(
					$source_dir . "/" . $contents[$i],
					$newresource
				);
				foreach ($copied_files as $copied_file) {
					$file_list[] = $copied_file;
				}
			} else {
				debug(sprintf("copy_recursive: copying %s/%s to %s", $source_dir, $contents[$i], $dest_dir));
				copy(
					$source_dir . "/" . $contents[$i],
					$newresource
				);
				$file_list[] = $dest_dir . "/" . $contents[$i];
			}
		}
	} else {
		debug(sprintf("copy_recursive: not copying due to error %s", $error));
	}

	debug(sprintf("copy_recursive: \$file_list contains %d items", count($file_list)));
	return $file_list;
}

function delete_recursive($dir = "")
{
	$files = array_diff(scandir($dir), [".", ".."]);
	foreach ($files as $file) {
		is_dir("$dir/$file")
			? delete_recursive("$dir/$file")
			: unlink("$dir/$file");
	}
	return rmdir($dir);
}

function remove_old()
{
	global $backup_conf;
	$metafiles = array();

	chdir($backup_conf["dst_dir"]);
	$cmd = sprintf("find %s -maxdepth 1 -type f -name '*.meta'", $backup_conf["dst_dir"]);
	debug(sprintf("\$cmd = %s", $cmd));

	exec($cmd, $output, $retval);
	if ($retval == 0) {
		foreach ($output as $key => $value) {
			inform(sprintf("Adding metadata file: %s", $value));
			$metafiles[] = $value;
		}
	}
	unset($output);

	foreach ($metafiles as $file) {
		$archive = new Archive();
		$archive->set_debug(DEBUG);
		if (strstr($file, '/')) {
			// filename includes a location, strip it off
			$path_parts = pathinfo($file);
			$archive->set_location($path_parts['dirname']);
			$archive->set_metadata_filename($path_parts['basename']);
		} else {
			$archive->set_location($backup_conf['dst_dir']);
			$archive->set_metadata_filename($file);
		}
		$archive->load_meta_file();
		inform(sprintf("  Metadata file %s is from date: %s", $file, $archive->get_metadata()['date']));

		$interval = date_diff(new DateTime(), date_create($archive->get_metadata()['date']));
		inform(sprintf("  Date difference between today and archive is: %d days", $interval->days));

		if ($interval->days > $backup_conf['retain']) {
			// Remove backups
			chdir($archive->get_location());
			inform(sprintf("  Removing archive %s", $archive->get_filename()));
			foreach ($archive->get_chunks() as $chunk) {
				inform(sprintf("    Deleting file: %s", $chunk['filename']));
				unlink($chunk['filename']);
			}
			inform(sprintf("    Deleting metafile: %s", $file));
			unlink($file);
		}
		unset ($archive);
	}

	return 0;
}

function backup_data()
{
	global $backup_data, $backup_conf;
	global $class_archive;
	$search = "/var/log";
	$filemode = 0640;

	// Adding files and folders to list of data to backup
	if (is_readable($backup_data['files'])) {
		$handle = fopen($backup_data['files'], "r");
		$fsize = filesize($backup_data['files']);
		while (($buffer = fgets($handle, $fsize)) !== false) {
			$afile = trim($buffer);
			// Verify the line is not commented out
			if (strpos($afile, "#") !== 0 and strlen($afile) > 0) {
				// Copy certain folders to tmp to prevent files from changing during tar
				if (strpos($afile, $search) === 0) {
					// Open files, copy to tmp dir for tar
					inform(sprintf("Copying %s to %s and adding it to list of files to backup", $afile, $backup_conf['tmp_dir']));
					$copied_files = copy_recursive(
						$afile,
						$backup_conf['tmp_dir']
					);
				} elseif (is_readable($afile)) {
					// Adding file/folder to list of backup
					inform("Adding $afile to list of files to backup");
					$class_archive->add_resource($afile);
				} else {
					debug(sprintf("Not adding %s as it's not readable", $afile));
				}
			}
		}
		fclose($handle);
	}

	// Removing exclusions from list of data to backup
	if (is_readable($backup_data['files_skip'])) {
		$handle = fopen($backup_data['files_skip'], "r");
		$fsize = filesize($backup_data['files_skip']);
		while (($buffer = fgets($handle, $fsize)) !== false) {
			$exclusion = trim($buffer);
			// Verify the line is not commented out
			if (strpos($exclusion, "#") !== 0 and strlen($exclusion) > 0) {
				inform("Adding $exclusion to list of files to exclude");
				$class_archive->add_exclusion($exclusion);
			}
		}
		fclose($handle);
	}

	$archive_name = sprintf("%s-%s",
		$backup_conf['hostname'],
		timestamp("Ymd")
	);

	// Write archive
	$class_archive->set_location($backup_conf['dst_dir']);
	$class_archive->set_filename($archive_name);
	$class_archive->set_compression_method($backup_conf['compression']);
	$class_archive->set_split_size($backup_conf['split_size']);
	foreach (str_split($backup_conf['tar_options']) as $option) {
		$class_archive->add_tar_option($option);
	}
	inform(sprintf("Writing archive %s... ", $class_archive->get_filename()), false);
	if($class_archive->write_archive()) {
		inform(sprintf("Done. Size is: %d", $class_archive->get_filename(), $class_archive->get_size()));
	} else {
		exit("Unable to write archive or metafile\n");
	}

	// Fix ownership & permissions of chunks
	foreach($class_archive->get_chunks() as $chunk) {
		chown($chunk['filename'], $backup_conf['luser']);
		chgrp($chunk['filename'], $backup_conf['lgroup']);
		chmod($chunk['filename'], $filemode);
	}

	// Fix ownership & permissions of metadata file
	chown($class_archive->get_metadata_filename(), $backup_conf['luser']);
	chgrp($class_archive->get_metadata_filename(), $backup_conf['lgroup']);
	chmod($class_archive->get_metadata_filename(), $filemode);
}

function store_remote()
{
	global $remote_host, $backup_conf;

	inform(sprintf("Storing archive to %s at %s using %s", $remote_host['address'], $remote_host['location'], $remote_host['method']));

	switch ($remote_host['method']) {
		case "scp":
			store_scp();
			break;
		case "ftp":
			store_ftp();
			break;
		case "rsync":
			store_rsync();
			break;
	}
}

function store_scp()
{
	global $archive, $remote_host, $backup_conf;

	$cmd = "sudo -u {$backup_conf['luser']} ";
	$cmd .= "scp $archive ";
	$cmd .=
		$remote_host['username'] .
		"@" .
		$remote_host['address'] .
		":" .
		$remote_host['location'];

	debug(sprintf("\$cmd = %s", $cmd));
	exec($cmd, $output, $retval);
	if ($retval == 0) {
		inform("Finished storing $archive");
	} else {
		inform("Error $retval:");
		foreach ($output as $line) {
			inform("$line");
		}
	}
}

function store_rsync()
{
	global $remote_host, $backup_conf;

	$cmd = sprintf("sudo -u %s rsync %s %s/ %s@%s:%s",
		$backup_conf['luser'],
		$backup_conf['rsync_options'],
		$backup_conf['dst_dir'],
		$remote_host['username'],
		$remote_host['address'],
		$remote_host['location']
	);
	debug(sprintf("\$cmd = %s", $cmd));

	$attempt = 0;
	inform(sprintf("Starting rsync"));
	while ($attempt < $backup_conf['store_retry']) {
		inform(sprintf("  Attempt %d at %s", $attempt + 1, date("H:i:s")));
		exec($cmd, $output, $retval);
		if ($retval == 0) {
			inform("Finished rsync at %s", date("H:i:s"));
			break;
		} else {
			inform(sprintf("Error %d on attempt %d of %d", $retval, $attempt +1, $backup_conf['store_retry'] +1));
			foreach ($output as $line) {
				inform("$line");
			}
			$attempt++;
		}
	}
}

function store_ftp()
{
	global $archive, $remote_host, $backup_conf, $backup_data;
	$old_archive =
		$remote_host['location'] .
		$backup_conf['hostname'] .
		"-" .
		timestamp("Ymd", strtotime("-" . $backup_conf['retain'] . " days")) .
		$backup_data['archive_extension'];

	($backup_conf['pgp_encrypt']) && $old_archive = sprintf("%s.gpg", $old_archive);
	debug(sprintf("\$old_archive: %s", $old_archive));
	$remote_file = $remote_host['location'] . basename($archive);

	$ftp_conn = ftp_connect($remote_host['address']);
	$login = ftp_login(
		$ftp_conn,
		$remote_host['username'],
		$remote_host['password']
	);

	if (ftp_delete($ftp_conn, $old_archive)) {
		inform(sprintf("Deleted %s from server"), $old_archive);
	} else {
		inform(sprintf("Unable to delete %s from server"), $old_archive);
	}

	if (ftp_put($ftp_conn, $remote_file, $archive, FTP_BINARY)) {
		inform("Finished storing $archive");
	} else {
		inform("Error storing to FTP");
	}
}

function timestamp($format = "Ymd-His", $time = 0)
{
	if ($time != 0) {
		return date($format, $time);
	} else {
		return date($format);
	}
}

function inform($msg, $newline = true)
{
	$output = sprintf("%s%s", $msg, $newline ? "\n" : "");
	echo $output;
}

function debug($msg)
{
	(DEBUG) ? $output = sprintf("DEBUG: %s | %s\n", date("H:i:s"), $msg) : $output = "";
	print $output;
}

function bash($cmd, &$stdout, &$stderr)
{
	$descriptorspec = [
		0 => ["pipe", "r"],  // stdin
		1 => ["pipe", "w"],  // stdout
		2 => ["pipe", "w"],  // stderr
	 ];

	 $process = proc_open($cmd, $descriptorspec, $pipes);

	 $stdout = stream_get_contents(($pipes[1]));
	 fclose($pipes[1]);

	 $stderr = stream_get_contents(($pipes[2]));
	 fclose($pipes[2]);

	 proc_close($process);
}
